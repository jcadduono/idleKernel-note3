#!/system/bin/sh

DDIR=/data/data/idlekernel

checksu=`ls /data/data`
[ -z "$checksu" ] && echo "Must be superuser!" && exit

while true; do

echo
echo "idleKernel configurator (based on lkconfig by Imoseyon)"
echo "---"
echo "0) display current settings"
echo "1) panel temperature"
echo "2) panel color"
echo "3) cpu max frequency"
echo "4) cpu governor"
echo "5) gpu governor"
echo "6) tcp congestion control"
echo "7) io scheduler"
echo "8) mmc crc"
echo "9) supersu install method"
echo "10) check top 10 wake locks (ie. wakeup sources)"
echo
echo -n "please enter a number (or press enter to exit): "

read option

case $option in
0)
	echo
	echo "current settings"
	echo "----------------"
	echo -n "1) panel temperature: "
	cat /sys/class/lcd/panel/temperature
	echo -n "2) panel color: "
	cat /sys/class/lcd/panel/panel_colors
	echo "3) cpu max frequency:"
	echo -n "     screen on: "
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
	echo -n "     screen off: "
	[ -d /sys/devices/system/cpu/cpufreq/interactive ] && cat /sys/devices/system/cpu/cpufreq/interactive/screen_off_maxfreq || echo unavailable
	echo -n "4) cpu governor: "
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
	echo -n "5) gpu governor: "
	cat /sys/devices/fdb00000.qcom,kgsl-3d0/devfreq/fdb00000.qcom,kgsl-3d0/governor
	echo -n "6) tcp congestion control: "
	cat /proc/sys/net/ipv4/tcp_congestion_control
	echo "7) io scheduler:"
	echo -n "     internal memory: "
	cat /sys/block/mmcblk0/queue/scheduler
	echo -n "     external sdcard: "
	cat /sys/block/mmcblk1/queue/scheduler
	echo -n "8) mmc crc: "
	[ `cat /sys/module/mmc_core/parameters/use_spi_crc` == Y ] && echo enabled || echo disabled
	echo -n "9) supersu install method: "
	[ -e /data/.supersu ] && {
		if grep -q SYSTEMLESS=false /data/.supersu; then
			echo system
		elif grep -q SYSTEMLESS=true /data/.supersu; then
			echo systemless
		else
			echo auto
		fi
	} || echo auto
	;;
1)
	echo
	echo -n "enter a number between -60 and 0 (the default is 0): "
	read value
	if [ $value -ge -60 -a $value -le 0 ]; then
		echo $value > $DDIR/paneltemp
		echo $value > /sys/class/lcd/panel/temperature
		echo "done!"
	fi
	;;
2)
	echo
	echo -n "enter a number between 0 and 4 (the default is 2): "
	read value
	if [ $value -ge 0 -a $value -le 4 ]; then
		echo $value > $DDIR/panelcolor
		echo $value > /sys/class/lcd/panel/panel_colors
		echo "done! toggle screen off/on to see changes"
	fi
	;;
3)
	echo
	echo "1) screen on max frequency"
	echo "2) screen off max frequency"
	echo
	echo -n "enter a number (or press enter to return): "
	read choice
	case $choice in
	1)
		echo "1) 650 mhz"
		echo "2) 883 mhz"
		echo "3) 1.2 ghz"
		echo "4) 1.5 ghz"
		echo "5) 2.2 ghz (default)"
		echo "6) 2.5 ghz"
		echo "7) 2.7 ghz"
		echo
		echo -n "enter a number (or press enter to return): "
		read value
		case $value in
			1) FREQ=652800;;
			2) FREQ=883200;;
			3) FREQ=1267200;;
			4) FREQ=1574400;;
			5) FREQ=2265600;;
			6) FREQ=2496000;;
			7) FREQ=2726400;;
			*) FREQ=;;
		esac
		if [ -n $FREQ ]; then
			echo $FREQ > $DDIR/scaling_max_freq
			echo $FREQ > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
			echo "done!"
		fi
		;;
	2)
		echo "1) 650 mhz"
		echo "2) 883 mhz"
		echo "3) 1.2 ghz (default, lower values can cause audio stutter)"
		echo "4) 1.5 ghz"
		echo "5) 2.2 ghz (disabled)"
		echo
		echo -n "enter a number (or press enter to return): "
		read value
		case $value in
			1) FREQ=652800;;
			2) FREQ=883200;;
			3) FREQ=1267200;;
			4) FREQ=1574400;;
			5) FREQ=2265600;;
			*) FREQ=;;
		esac
		if [ -n $FREQ ]; then
			echo $FREQ > $DDIR/screen_off_maxfreq
			[ -d /sys/devices/system/cpu/cpufreq/interactive ] && echo $FREQ > /sys/devices/system/cpu/cpufreq/interactive/screen_off_maxfreq
			echo "done!"
		fi
		;;
	esac
	;;
4)
	echo
	echo "1) ondemand"
	echo "2) interactive (default)"
	echo "3) performance"
	echo
	echo -n "enter a number (or press enter to return): "
        read value
        case $value in
		1) GOV=ondemand;;
		2) GOV=interactive;;
		3) GOV=performance;;
		*) GOV=;;
        esac
	if [ -n $GOV ]; then
		echo $GOV > $DDIR/cpu_governor
		echo $GOV > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
		echo "done!"
	fi
	;;
5)
	echo
	echo "1) msm-adreno-tz (default)"
	echo "2) powersave"
	echo "3) performance"
	echo "4) simple_ondemand"
	echo
	echo -n "enter a number (or press enter to return): "
        read value
        case $value in
		1) GOV=msm-adreno-tz;;
		2) GOV=powersave;;
		3) GOV=performance;;
		4) GOV=simple_ondemand;;
		*) GOV=;;
        esac
	if [ -n $GOV ]; then
		echo $GOV > $DDIR/gpu_governor
		echo $GOV > /sys/devices/fdb00000.qcom,kgsl-3d0/devfreq/fdb00000.qcom,kgsl-3d0/governor
		echo "done!"
	fi
	;;
6)
	echo
	echo "1) cubic (default)"
	echo "2) westwood"
	echo "3) reno"
	echo
	echo -n "enter a number (or press enter to return): "
        read value
        case $value in
		1) ALG=cubic;;
		2) ALG=westwood;;
		3) ALG=reno;;
		*) ALG=;;
        esac
	if [ -n $ALG ]; then
		echo $ALG > $DDIR/tcp_congestion_control
		echo $ALG > /proc/sys/net/ipv4/tcp_congestion_control
		echo "done!"
	fi
	;;
7)
	echo
	echo "1) internal memory io scheduler"
	echo "2) external sdcard io scheduler"
	echo
	echo -n "enter a number (or press enter to return): "
	read choice
	case $choice in
	1|2)
		echo "1) noop"
		echo "2) deadline"
		echo "3) row"
		echo "4) sio"
		echo "5) fiops (default)"
		echo
		echo -n "enter a number (or press enter to return): "
		read value
		case $value in
			1) SCHED=noop;;
			2) SCHED=deadline;;
			3) SCHED=row;;
			4) SCHED=sio;;
			5) SCHED=fiops;;
			*) SCHED=;;
		esac
		if [ -n $SCHED ]; then
			if [ $choice -eq 1 ]; then
				echo $SCHED > $DDIR/io_scheduler_internal
				echo $SCHED > /sys/block/mmcblk0/queue/scheduler
			else
				echo $SCHED > $DDIR/io_scheduler_external
				echo $SCHED > /sys/block/mmcblk1/queue/scheduler
			fi
			echo "done!"
		fi
		;;
	esac
	;;
8)
	echo
	echo -n "enter 'y' to enable or 'n' to disable mmc crc: "
	read value
	case $value in
		y|Y) CRC=Y;;
		n|N) CRC=N;;
		*) CRC=;;
	esac
	if [ -n $CRC ]; then
		echo $CRC > $DDIR/use_spi_crc
		echo $CRC > /sys/module/mmc_core/parameters/use_spi_crc
		echo "done!"
	fi
	;;
9)
	echo
	echo "1) auto"
	echo "2) system (default)"
	echo "3) systemless"
	echo
	echo -n "enter a number (or press enter to return): "
        read value
        case $value in
		1) SUI=detect;;
		2) SUI=false;;
		3) SUI=true;;
		*) SUI=;;
        esac
	if [ -n $SUI ]; then
		echo "SYSTEMLESS=$SUI" > $DDIR/supersu
		echo "SYSTEMLESS=$SUI" > /data/.supersu
		echo "done!"
	fi
	;;
10)
	echo
        if [ -a /system/xbin/awk ]; then
                echo "1st column: total time wakeup source has been active."
                echo "2nd column: max time the source was continuously active."
                echo "(the numbers are duration in seconds)"
                echo "-----"
                cat /sys/kernel/debug/wakeup_sources | grep -v wakeup_count \
                  | awk '{ printf "%-10s%-8s %s\n",int($7/1000),int($8/1000),$1 }' \
                  | sort -rn | head -10
        else
                echo "busybox required!"
        fi
        ;;
*)
	exit
	;;
esac
echo
done
